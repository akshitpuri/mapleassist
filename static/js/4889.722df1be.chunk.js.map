{"version":3,"file":"static/js/4889.722df1be.chunk.js","mappings":"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","sources":["components/filetools/imagetools/HTMLtoImage.js","components/Toast.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport Toast from '../../Toast';\r\nimport html2canvas from 'html2canvas';\r\n\r\nexport default function HTMLtoImage() {\r\n  const [htmlContent, setHtmlContent] = useState('');\r\n  const [imageURL, setImageURL] = useState('');\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (msg, type = 'info') => {\r\n    setToast({ message: msg, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const captureHTML = async () => {\r\n    if (!htmlContent.trim()) return showToast('Enter some HTML to capture.', 'error');\r\n\r\n    const container = document.createElement('div');\r\n    container.innerHTML = htmlContent;\r\n    container.style.position = 'fixed';\r\n    container.style.left = '-9999px';\r\n    container.style.width = '600px';\r\n    container.style.padding = '20px';\r\n    document.body.appendChild(container);\r\n\r\n    try {\r\n      const canvas = await html2canvas(container);\r\n      const url = canvas.toDataURL('image/png');\r\n      setImageURL(url);\r\n      showToast('HTML captured successfully!', 'success');\r\n    } catch (err) {\r\n      showToast('Failed to capture HTML.', 'error');\r\n    } finally {\r\n      document.body.removeChild(container);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"🌐 HTML to Image\">\r\n      {/* 📘 Guidance Block */}\r\n      <div style={{ fontSize: '0.95rem', lineHeight: '1.6', color: '#444', marginBottom: '20px' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Convert HTML Snippets to Images Instantly</h2>\r\n        <p>\r\n          Paste your HTML, styles, or UI code snippet and generate a PNG image preview — useful for\r\n          screenshots, UI sharing, or thumbnails.\r\n        </p>\r\n        <ul style={{ paddingLeft: '20px' }}>\r\n          <li>📦 Works with basic HTML and inline CSS</li>\r\n          <li>🔒 Private and offline — powered by <strong>html2canvas</strong></li>\r\n        </ul>\r\n      </div>\r\n\r\n      <label>\r\n        HTML Content:\r\n        <textarea\r\n          value={htmlContent}\r\n          onChange={(e) => setHtmlContent(e.target.value)}\r\n          placeholder=\"<div style='color:red'>Hello world</div>\"\r\n          rows={6}\r\n          style={{\r\n            width: '100%',\r\n            marginTop: '10px',\r\n            padding: '12px',\r\n            fontFamily: 'monospace',\r\n            fontSize: '0.95rem',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '6px'\r\n          }}\r\n        />\r\n      </label>\r\n\r\n      <button\r\n        onClick={captureHTML}\r\n        style={{\r\n          marginTop: '20px',\r\n          padding: '10px 16px',\r\n          backgroundColor: '#3f51b5',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '6px',\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        Convert HTML to Image\r\n      </button>\r\n\r\n      {imageURL && (\r\n        <div style={{ marginTop: '30px', textAlign: 'center' }}>\r\n          <img src={imageURL} alt=\"HTML to Image preview\" style={{ maxWidth: '100%' }} />\r\n          <a href={imageURL} download=\"html-image.png\">\r\n            <button\r\n              style={{\r\n                marginTop: '10px',\r\n                padding: '10px 16px',\r\n                backgroundColor: '#4caf50',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '6px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              ⬇ Download Image\r\n            </button>\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n    </FileToolsLayout>\r\n  );\r\n}","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        ×\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 🎨 Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};"],"names":["HTMLtoImage","htmlContent","setHtmlContent","useState","imageURL","setImageURL","toast","setToast","showToast","msg","message","type","arguments","length","undefined","setTimeout","_jsxs","FileToolsLayout","title","children","style","fontSize","lineHeight","color","marginBottom","_jsx","paddingLeft","value","onChange","e","target","placeholder","rows","width","marginTop","padding","fontFamily","border","borderRadius","onClick","async","trim","container","document","createElement","innerHTML","position","left","body","appendChild","url","html2canvas","toDataURL","err","removeChild","backgroundColor","cursor","textAlign","src","alt","maxWidth","href","download","Toast","onClose","_ref","className","role","text","closeBtn","display","justifyContent","alignItems","boxShadow","gap","flex","background"],"sourceRoot":""}