{"version":3,"file":"static/js/8076.921ab09a.chunk.js","mappings":"kJAiEA,QA9DA,SAAiBA,GAA+D,IAA9D,OAAEC,EAAM,gBAAEC,EAAe,OAAEC,EAAS,IAAG,SAAEC,GAAW,GAAOJ,EAC3E,MAAMK,GAAWC,EAAAA,EAAAA,WACVC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,IA+BnD,OACEC,EAAAA,EAAAA,MAAA,OACEC,UAAU,WACVV,OAhCgBW,IAClBA,EAAEC,iBACF,MAAMC,EAAQC,MAAMC,KAAKJ,EAAEK,aAAaH,OACnB,IAAjBA,EAAMI,SAEVV,EAAiBM,GAEbV,GAAYF,EACdA,EAAgBY,GACPb,GACTA,EAAOa,EAAM,MAuBbK,WAAaP,GAAMA,EAAEC,iBACrBO,QApBgBC,IAAMhB,EAASiB,QAAQC,QAoBlBC,SAAA,EAErBd,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,mBAAiBpB,EAAW,IAAM,GAAG,2BACxCqB,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,IAAKtB,EACLF,OAAQA,EACRC,SAAUA,EACVwB,SA1BgBhB,IACpB,MAAME,EAAQC,MAAMC,KAAKJ,EAAEiB,OAAOf,OACb,IAAjBA,EAAMI,SAEVV,EAAiBM,GAEbV,GAAYF,EACdA,EAAgBY,GACPb,GACTA,EAAOa,EAAM,MAkBXgB,MAAO,CAAEC,QAAS,UAEnBxB,EAAcW,OAAS,IACtBO,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEE,UAAW,OAAQC,YAAa,QAAST,SACnDjB,EAAc2B,IAAI,CAACC,EAAMC,KACxBX,EAAAA,EAAAA,KAAA,MAAYK,MAAO,CAAEO,SAAU,SAAUC,MAAO,QAASd,SACtDW,EAAKI,MADCH,QAQrB,C,uDC5De,SAASI,EAAKxC,GAAuC,IAAtC,QAAEyC,EAAO,KAAEf,EAAO,OAAM,QAAEgB,GAAS1C,EAC/D,OACEU,EAAAA,EAAAA,MAAA,OAAKC,UAAW,eAAee,IAAQiB,KAAK,QAAQ,YAAU,YAAYb,MAAOc,EAAUpB,SAAA,EACzFC,EAAAA,EAAAA,KAAA,QAAMK,MAAOe,EAAKrB,SAAEiB,KACpBhB,EAAAA,EAAAA,KAAA,UACEL,QAASsB,EACTZ,MAAOgB,EACP,aAAW,uBAAsBtB,SAClC,WAKP,CAGA,MAAMoB,EAAY,CAChBb,QAAS,OACTgB,eAAgB,gBAChBC,WAAY,SACZC,QAAS,YACTC,aAAc,MACdC,UAAW,6BACXC,gBAAiB,UACjBf,SAAU,UACVC,MAAO,OACPe,IAAK,OACLC,WAAY,qCAGRT,EAAO,CACXU,KAAM,GAGFT,EAAW,CACfU,WAAY,cACZC,OAAQ,OACRpB,SAAU,SACVqB,OAAQ,UACRpB,MAAO,O,oGCrCM,SAASqB,IACtB,MAAOxB,EAAMyB,IAAWnD,EAAAA,EAAAA,UAAS,OAC1BoD,EAAaC,IAAkBrD,EAAAA,EAAAA,UAAS,IACxCsD,EAAaC,IAAkBvD,EAAAA,EAAAA,UAAS,KACxCwD,EAAOC,IAAYzD,EAAAA,EAAAA,UAAS,MAE7B0D,EAAY,SAACC,GACjBF,EAAS,CAAEzB,QAAS2B,EAAK1C,KADC2C,UAAAnD,OAAA,QAAAoD,IAAAD,UAAA,GAAAA,UAAA,GAAG,SAE7BE,WAAW,IAAML,EAAS,MAAO,IACnC,EAkCA,OACExD,EAAAA,EAAAA,MAAC8D,EAAAA,EAAe,CAACC,MAAM,6BAAkBjD,SAAA,EACvCC,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAACvE,OAAO,UAAUF,OAAS0E,GAAMf,EAAQe,MAGlDjE,EAAAA,EAAAA,MAAA,OAAKoB,MAAO,CAAEE,UAAW,OAAQK,SAAU,UAAWuC,WAAY,MAAOtC,MAAO,QAASd,SAAA,EACvFC,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEO,SAAU,UAAWb,SAAC,4CACnCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qHAGHd,EAAAA,EAAAA,MAAA,MAAIoB,MAAO,CAAEG,YAAa,QAAST,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mEAIPW,IACCzB,EAAAA,EAAAA,MAAAmE,EAAAA,SAAA,CAAArD,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAAEE,UAAW,QAASR,UAChCd,EAAAA,EAAAA,MAAA,SAAAc,SAAA,CAAO,gBACS,KACdd,EAAAA,EAAAA,MAAA,UACEoE,MAAOjB,EACPjC,SAAWhB,GAAMkD,EAAeiB,SAASnE,EAAEiB,OAAOiD,QAClDhD,MAAO,CAAEmB,QAAS,YAAazB,SAAA,EAE/BC,EAAAA,EAAAA,KAAA,UAAQqD,MAAO,EAAEtD,SAAC,WAClBC,EAAAA,EAAAA,KAAA,UAAQqD,MAAO,EAAEtD,SAAC,WAClBC,EAAAA,EAAAA,KAAA,UAAQqD,MAAO,EAAEtD,SAAC,mBAKxBC,EAAAA,EAAAA,KAAA,UACEL,QAnEY4D,KACpB,IAAK7C,EAAM,OAAOgC,EAAU,8BAA+B,SAE3D,MAAMc,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACd,MAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAML,EAAOM,OAEjBH,EAAID,OAAS,KACX,MAAMK,EAAWJ,EAAIK,MAAQ5B,EACvB6B,EAAYN,EAAIO,OAAS9B,EAEzB+B,EAASC,SAASC,cAAc,UACtCF,EAAOH,MAAQD,EACfI,EAAOD,OAASD,EAEhB,MAAMK,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,uBAAwB,EAC5BF,EAAIG,sBAAwB,OAC5BH,EAAII,UAAUf,EAAK,EAAG,EAAGI,EAAUE,GAEnCE,EAAOQ,OAAQC,IACb,MAAMC,EAAMC,IAAIC,gBAAgBH,GAChCrC,EAAesC,GACfnC,EAAU,qBAAqBN,oBAA4B,YAC1D,eAIPoB,EAAOwB,cAActE,IAuCbL,MAAO,CACLE,UAAW,OACXiB,QAAS,YACTG,gBAAiB,UACjBd,MAAO,QACPmB,OAAQ,OACRP,aAAc,MACdQ,OAAQ,WACRlC,SACH,qBAMJuC,IACCrD,EAAAA,EAAAA,MAAA,OAAKoB,MAAO,CAAEE,UAAW,OAAQ0E,UAAW,UAAWlF,SAAA,EACrDC,EAAAA,EAAAA,KAAA,OAAK6D,IAAKvB,EAAa4C,IAAI,mBAAmB7E,MAAO,CAAE8E,SAAU,WACjEnF,EAAAA,EAAAA,KAAA,KAAGoF,KAAM9C,EAAa+C,SAAS,eAActF,UAC3CC,EAAAA,EAAAA,KAAA,UACEK,MAAO,CACLE,UAAW,OACXiB,QAAS,YACTG,gBAAiB,UACjBd,MAAO,QACPmB,OAAQ,OACRP,aAAc,MACdQ,OAAQ,WACRlC,SACH,wCAONyC,IAASxC,EAAAA,EAAAA,KAACe,EAAAA,EAAK,CAACC,QAASwB,EAAMxB,QAASf,KAAMuC,EAAMvC,KAAMgB,QAASA,IAAMwB,EAAS,UAGzF,C","sources":["components/filetools/DropZone.js","components/Toast.js","components/filetools/imagetools/UpscaleImage.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        √ó\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// üé® Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\n\r\nexport default function UpscaleImage() {\r\n  const [file, setFile] = useState(null);\r\n  const [scaleFactor, setScaleFactor] = useState(2); // Default 2x\r\n  const [upscaledURL, setUpscaledURL] = useState('');\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (msg, type = 'info') => {\r\n    setToast({ message: msg, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const handleUpscale = () => {\r\n    if (!file) return showToast('Upload an image to upscale.', 'error');\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      const img = new Image();\r\n      img.src = reader.result;\r\n\r\n      img.onload = () => {\r\n        const newWidth = img.width * scaleFactor;\r\n        const newHeight = img.height * scaleFactor;\r\n\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = newWidth;\r\n        canvas.height = newHeight;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = 'high';\r\n        ctx.drawImage(img, 0, 0, newWidth, newHeight);\r\n\r\n        canvas.toBlob((blob) => {\r\n          const url = URL.createObjectURL(blob);\r\n          setUpscaledURL(url);\r\n          showToast(`Image upscaled to ${scaleFactor}√ó resolution!`, 'success');\r\n        }, 'image/png');\r\n      };\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"üîç Upscale Image\">\r\n      <DropZone accept=\"image/*\" onDrop={(f) => setFile(f)} />\r\n\r\n      {/* üìò Guidance Block */}\r\n      <div style={{ marginTop: '30px', fontSize: '0.95rem', lineHeight: '1.6', color: '#444' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Increase Image Resolution in One Click</h2>\r\n        <p>\r\n          Enlarge JPG and PNG files right in your browser ‚Äî ideal for thumbnails, banners, or pixel-perfect exports.\r\n        </p>\r\n        <ul style={{ paddingLeft: '20px' }}>\r\n          <li>üìè Resize up to 4√ó original dimensions</li>\r\n          <li>üß† Uses smart canvas smoothing to reduce pixelation</li>\r\n          <li>üîí Local and private ‚Äî no server involved</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {file && (\r\n        <>\r\n          <div style={{ marginTop: '20px' }}>\r\n            <label>\r\n              Scale Factor:{' '}\r\n              <select\r\n                value={scaleFactor}\r\n                onChange={(e) => setScaleFactor(parseInt(e.target.value))}\r\n                style={{ padding: '6px 10px' }}\r\n              >\r\n                <option value={2}>2√ó</option>\r\n                <option value={3}>3√ó</option>\r\n                <option value={4}>4√ó</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n\r\n          <button\r\n            onClick={handleUpscale}\r\n            style={{\r\n              marginTop: '20px',\r\n              padding: '10px 16px',\r\n              backgroundColor: '#3f51b5',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Upscale Image\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      {upscaledURL && (\r\n        <div style={{ marginTop: '30px', textAlign: 'center' }}>\r\n          <img src={upscaledURL} alt=\"Upscaled preview\" style={{ maxWidth: '100%' }} />\r\n          <a href={upscaledURL} download=\"upscaled.png\">\r\n            <button\r\n              style={{\r\n                marginTop: '10px',\r\n                padding: '10px 16px',\r\n                backgroundColor: '#4caf50',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '6px',\r\n                cursor: 'pointer'\r\n              }}\r\n            >\r\n              ‚¨á Download Upscaled Image\r\n            </button>\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n    </FileToolsLayout>\r\n  );\r\n}"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","Toast","message","onClose","role","container","text","closeBtn","justifyContent","alignItems","padding","borderRadius","boxShadow","backgroundColor","gap","fontFamily","flex","background","border","cursor","UpscaleImage","setFile","scaleFactor","setScaleFactor","upscaledURL","setUpscaledURL","toast","setToast","showToast","msg","arguments","undefined","setTimeout","FileToolsLayout","title","DropZone","f","lineHeight","_Fragment","value","parseInt","handleUpscale","reader","FileReader","onload","img","Image","src","result","newWidth","width","newHeight","height","canvas","document","createElement","ctx","getContext","imageSmoothingEnabled","imageSmoothingQuality","drawImage","toBlob","blob","url","URL","createObjectURL","readAsDataURL","textAlign","alt","maxWidth","href","download"],"sourceRoot":""}