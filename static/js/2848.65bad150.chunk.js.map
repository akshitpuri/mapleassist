{"version":3,"file":"static/js/2848.65bad150.chunk.js","mappings":"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","sources":["components/filetools/DropZone.js","components/filetools/gifs/ExtractGIFFrames.js","components/Toast.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\n\r\nexport default function ExtractGIFFrames() {\r\n  const [gifFile, setGifFile] = useState(null);\r\n  const [frames, setFrames] = useState([]);\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (msg, type = 'info') => {\r\n    setToast({ message: msg, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const extractFrames = async () => {\r\n    if (!gifFile) return showToast('Please upload a GIF file.', 'error');\r\n\r\n    try {\r\n      const { default: gifFrames } = await import('gif-frames');\r\n      const buffer = await gifFile.arrayBuffer();\r\n      const result = await gifFrames({ url: buffer, type: 'png', frames: 'all' });\r\n\r\n      const extracted = await Promise.all(\r\n        result.map(async (f, i) => {\r\n          const blob = await new Promise(res => f.getImage().pipe(blobStream => {\r\n            const chunks = [];\r\n            blobStream.on('data', chunk => chunks.push(chunk));\r\n            blobStream.on('end', () => res(new Blob(chunks, { type: 'image/png' })));\r\n          }));\r\n          const url = URL.createObjectURL(blob);\r\n          return { name: `frame_${i + 1}.png`, blob, url };\r\n        })\r\n      );\r\n\r\n      setFrames(extracted);\r\n      showToast(`Extracted ${extracted.length} frame(s)`, 'success');\r\n    } catch {\r\n      showToast('Failed to extract frames', 'error');\r\n    }\r\n  };\r\n\r\n  const downloadZip = async () => {\r\n    const JSZip = (await import('jszip')).default;\r\n    const { saveAs } = await import('file-saver');\r\n    const zip = new JSZip();\r\n\r\n    frames.forEach(({ name, blob }) => zip.file(name, blob));\r\n    const zipped = await zip.generateAsync({ type: 'blob' });\r\n    saveAs(zipped, 'gif_frames.zip');\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"ðŸŽ¬ Extract GIF Frames\">\r\n      <DropZone\r\n        accept=\".gif\"\r\n        multiple={false}\r\n        onSingleFile={(f) => {\r\n          setGifFile(f);\r\n          setFrames([]);\r\n        }}\r\n      />\r\n\r\n      {/* ðŸ“˜ SEO Guidance Block */}\r\n      <div style={{ marginTop: 30, fontSize: '0.95rem', lineHeight: '1.6', color: '#444' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Break Down GIFs into Individual Frames</h2>\r\n        <p>\r\n          Extract all frames from animated GIFs directly in your browser. Perfect for editing,\r\n          remixing, thumbnail generation, or creating memes from any moment.\r\n        </p>\r\n        <ul style={{ paddingLeft: 20 }}>\r\n          <li>ðŸŽ¬ View and download each frame as a PNG</li>\r\n          <li>ðŸ“¦ Save all frames into a ZIP archive</li>\r\n          <li>âš¡ Powered by <strong>gif-frames</strong> for precision slicing</li>\r\n          <li>ðŸ”’ No server upload â€” fully browser-based</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {gifFile && (\r\n        <button\r\n          onClick={extractFrames}\r\n          style={{\r\n            marginTop: 20,\r\n            padding: '10px 16px',\r\n            backgroundColor: '#3f51b5',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '6px',\r\n            cursor: 'pointer'\r\n          }}\r\n        >\r\n          Extract Frames\r\n        </button>\r\n      )}\r\n\r\n      {frames.length > 0 && (\r\n        <>\r\n          <div style={{ marginTop: '30px', display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\r\n            {frames.map(({ name, url }, i) => (\r\n              <div key={i} style={{ textAlign: 'center' }}>\r\n                <p style={{ fontSize: '0.9rem' }}>{name}</p>\r\n                <img src={url} alt={`Frame ${i + 1}`} style={{ width: '150px' }} />\r\n                <a href={url} download={name}>\r\n                  <button style={{\r\n                    marginTop: '8px',\r\n                    padding: '6px 12px',\r\n                    backgroundColor: '#4caf50',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: '6px',\r\n                    cursor: 'pointer'\r\n                  }}>\r\n                    Download\r\n                  </button>\r\n                </a>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <button\r\n            onClick={downloadZip}\r\n            style={{\r\n              marginTop: '30px',\r\n              padding: '10px 16px',\r\n              backgroundColor: '#1976d2',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            â¬‡ Download All as ZIP\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n    </FileToolsLayout>\r\n  );\r\n}","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        Ã—\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// ðŸŽ¨ Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","ExtractGIFFrames","gifFile","setGifFile","frames","setFrames","toast","setToast","showToast","msg","message","arguments","undefined","setTimeout","FileToolsLayout","title","DropZone","onSingleFile","f","lineHeight","async","default","gifFrames","buffer","arrayBuffer","result","url","extracted","Promise","all","blob","res","getImage","pipe","blobStream","chunks","on","chunk","push","Blob","URL","createObjectURL","padding","backgroundColor","border","borderRadius","cursor","_Fragment","flexWrap","gap","_ref2","textAlign","src","alt","width","href","download","JSZip","saveAs","zip","forEach","generateAsync","Toast","onClose","role","container","text","closeBtn","justifyContent","alignItems","boxShadow","fontFamily","flex","background"],"sourceRoot":""}