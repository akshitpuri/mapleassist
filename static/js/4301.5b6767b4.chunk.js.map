{"version":3,"file":"static/js/4301.5b6767b4.chunk.js","mappings":"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","sources":["components/filetools/DropZone.js","components/filetools/ocr/OCRTools.js","components/Toast.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\n\r\nexport default function OCRTools() {\r\n  const [images, setImages] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n  const [format, setFormat] = useState('txt');\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (msg, type = 'info') => {\r\n    setToast({ message: msg, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const convertImages = async (incoming) => {\r\n    setImages(incoming);\r\n    setResults([]);\r\n    const Tesseract = (await import('tesseract.js')).default;\r\n    const output = [];\r\n\r\n    for (const img of incoming) {\r\n      try {\r\n        const { data } = await Tesseract.recognize(img, 'eng', { logger: m => console.log(m) });\r\n        const text = data.text.trim();\r\n        const base = img.name.split('.')[0];\r\n\r\n        let blob, url;\r\n        if (format === 'txt') {\r\n          blob = new Blob([text], { type: 'text/plain' });\r\n          url = URL.createObjectURL(blob);\r\n        } else if (format === 'pdf') {\r\n          const { PDFDocument, StandardFonts } = await import('pdf-lib');\r\n          const pdfDoc = await PDFDocument.create();\r\n          const page = pdfDoc.addPage();\r\n          const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\r\n          page.setFont(font);\r\n          page.drawText(text.slice(0, 3000), {\r\n            x: 50,\r\n            y: page.getHeight() - 50,\r\n            maxWidth: 500,\r\n            lineHeight: 20\r\n          });\r\n          const pdfBytes = await pdfDoc.save();\r\n          blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n          url = URL.createObjectURL(blob);\r\n        }\r\n\r\n        output.push({ name: `${base}.${format}`, url, blob, preview: URL.createObjectURL(img) });\r\n      } catch {\r\n        showToast(`Failed to scan ${img.name}`, 'error');\r\n      }\r\n    }\r\n\r\n    setResults(output);\r\n    showToast(`Extracted text from ${output.length} image(s)`, 'success');\r\n  };\r\n\r\n  const downloadZip = async () => {\r\n    const JSZip = (await import('jszip')).default;\r\n    const { saveAs } = await import('file-saver');\r\n\r\n    const zip = new JSZip();\r\n    results.forEach(({ name, blob }) => zip.file(name, blob));\r\n    const zipped = await zip.generateAsync({ type: 'blob' });\r\n    saveAs(zipped, 'ocr_results.zip');\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"🔍 OCR Tool\">\r\n   \r\n      <DropZone multiple accept=\"image/*\" onMultipleFiles={convertImages} />\r\n\r\n      <div style={{ marginTop: '20px', display: 'flex', gap: '14px', alignItems: 'center' }}>\r\n        <label>Export as:</label>\r\n        <select\r\n          value={format}\r\n          onChange={(e) => setFormat(e.target.value)}\r\n          style={{ padding: '8px' }}\r\n        >\r\n          <option value=\"txt\">Text (.txt)</option>\r\n          <option value=\"pdf\">PDF (.pdf)</option>\r\n        </select>\r\n      </div>\r\n\r\n      {/* SEO-enhanced block */}\r\n      <div style={{ marginTop: '30px', color: '#444', fontSize: '0.95rem', lineHeight: '1.6' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Extract Text from Images with OCR</h2>\r\n        <p>\r\n          Upload scanned documents or screenshots and convert them into editable text or PDF using Optical Character Recognition.\r\n          All processing happens securely in-browser via <strong>tesseract.js</strong>.\r\n        </p>\r\n        <ul style={{ paddingLeft: '20px' }}>\r\n          <li>🧠 Detect printed or handwritten English text</li>\r\n          <li>📄 Export extracted content to text or PDF</li>\r\n          <li>🔐 100% client-side — no upload, full privacy</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {results.length > 0 && (\r\n        <>\r\n          <div style={{ marginTop: '30px', display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\r\n            {results.map(({ name, url, preview }, i) => (\r\n              <div key={i} style={{ textAlign: 'center' }}>\r\n                {preview && <img src={preview} alt={name} style={{ width: '140px', borderRadius: '6px', marginBottom: '10px' }} />}\r\n                <p style={{ fontSize: '0.9rem' }}>{name}</p>\r\n                <a href={url} download={name}>\r\n                  <button style={{\r\n                    padding: '6px 12px',\r\n                    backgroundColor: '#4caf50',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: '6px',\r\n                    cursor: 'pointer'\r\n                  }}>\r\n                    Download\r\n                  </button>\r\n                </a>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <button\r\n            onClick={downloadZip}\r\n            style={{\r\n              marginTop: '30px',\r\n              padding: '10px 16px',\r\n              backgroundColor: '#1976d2',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            ⬇ Download All as ZIP\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n    </FileToolsLayout>\r\n  );\r\n}","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        ×\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 🎨 Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","OCRTools","images","setImages","results","setResults","format","setFormat","toast","setToast","showToast","msg","message","arguments","undefined","setTimeout","FileToolsLayout","title","DropZone","async","incoming","Tesseract","default","output","img","data","recognize","logger","m","console","log","text","trim","base","split","blob","url","Blob","URL","createObjectURL","PDFDocument","StandardFonts","pdfDoc","create","page","addPage","font","embedFont","Helvetica","setFont","drawText","slice","x","y","getHeight","maxWidth","lineHeight","pdfBytes","save","push","preview","gap","alignItems","value","padding","_Fragment","flexWrap","_ref2","textAlign","src","alt","width","borderRadius","marginBottom","href","download","backgroundColor","border","cursor","JSZip","saveAs","zip","forEach","generateAsync","Toast","onClose","role","container","closeBtn","justifyContent","boxShadow","fontFamily","flex","background"],"sourceRoot":""}