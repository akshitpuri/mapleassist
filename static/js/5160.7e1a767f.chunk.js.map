{"version":3,"file":"static/js/5160.7e1a767f.chunk.js","mappings":"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","sources":["components/filetools/DropZone.js","components/filetools/compression/AllCompressionTools.js","components/Toast.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\n\r\nexport default function AllCompressionTools() {\r\n  const [compressedFiles, setCompressedFiles] = useState([]);\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (msg, type = 'info') => {\r\n    setToast({ message: msg, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const compressFiles = async (incoming) => {\r\n    setCompressedFiles([]);\r\n    const output = [];\r\n\r\n    for (const file of incoming) {\r\n      const ext = file.name.split('.').pop().toLowerCase();\r\n      const base = file.name.replace(/\\.[^/.]+$/, '');\r\n\r\n      try {\r\n        if (ext === 'pdf') {\r\n          const { PDFDocument } = await import('pdf-lib');\r\n          const bytes = await file.arrayBuffer();\r\n          const original = await PDFDocument.load(bytes);\r\n          const compressed = await PDFDocument.create();\r\n          const pages = await compressed.copyPages(original, original.getPageIndices());\r\n          pages.forEach(p => compressed.addPage(p));\r\n          const finalBytes = await compressed.save();\r\n          const blob = new Blob([finalBytes], { type: 'application/pdf' });\r\n          output.push({ name: `${base}_compressed.pdf`, blob });\r\n        }\r\n\r\n        else if (['png', 'jpg', 'jpeg'].includes(ext)) {\r\n          const img = new Image();\r\n          img.src = URL.createObjectURL(file);\r\n          await new Promise(res => (img.onload = res));\r\n\r\n          const canvas = document.createElement('canvas');\r\n          canvas.width = img.width * 0.7;\r\n          canvas.height = img.height * 0.7;\r\n          const ctx = canvas.getContext('2d');\r\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n\r\n          const mime = ext === 'png' ? 'image/png' : 'image/jpeg';\r\n          const blob = await new Promise(res => canvas.toBlob(res, mime, 0.6));\r\n          output.push({ name: `${base}_compressed.${ext}`, blob });\r\n        }\r\n\r\n        else if (['txt', 'epub'].includes(ext)) {\r\n          const text = await file.text();\r\n          const trimmed = text.replace(/\\s+/g, ' ').slice(0, 30000);\r\n          const blob = new Blob([trimmed], { type: 'text/plain' });\r\n          output.push({ name: `${base}_compressed.txt`, blob });\r\n        }\r\n\r\n        else {\r\n          showToast(`Unsupported format: ${file.name}`, 'warning');\r\n        }\r\n      } catch {\r\n        showToast(`Failed to compress ${file.name}`, 'error');\r\n      }\r\n    }\r\n\r\n    setCompressedFiles(output);\r\n    showToast(`Compressed ${output.length} file(s)`, 'success');\r\n  };\r\n\r\n  const downloadZip = async () => {\r\n    const JSZip = (await import('jszip')).default;\r\n    const { saveAs } = await import('file-saver');\r\n    const zip = new JSZip();\r\n\r\n    compressedFiles.forEach(({ name, blob }) => zip.file(name, blob));\r\n    const zipped = await zip.generateAsync({ type: 'blob' });\r\n    saveAs(zipped, 'compressed_files.zip');\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"🗜️ Compress Files\">\r\n      <DropZone\r\n        multiple\r\n        accept=\".pdf,.png,.jpg,.jpeg,.txt,.epub\"\r\n        onMultipleFiles={compressFiles}\r\n      />\r\n\r\n      {/* 📘 SEO Guidance Block */}\r\n      <div style={{ marginTop: '30px', fontSize: '0.95rem', lineHeight: '1.6', color: '#444' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Compress PDFs, Images, and Text Files Instantly</h2>\r\n        <p>\r\n          Optimize your documents, images, and plain text files for faster sharing and smaller storage.\r\n          This browser-based tool safely reduces file size without server uploads.\r\n        </p>\r\n        <ul style={{ paddingLeft: '20px' }}>\r\n          <li>🗜️ PDF optimization using <strong>pdf-lib</strong></li>\r\n          <li>🖼️ Resize and compress PNG/JPG images with Canvas API</li>\r\n          <li>📄 Trim and flatten text or EPUB files</li>\r\n          <li>📦 Export compressed batch as a single ZIP</li>\r\n          <li>🔒 All processing is 100% local and private</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {compressedFiles.length > 0 && (\r\n        <>\r\n          <div style={{ marginTop: '30px', display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\r\n            {compressedFiles.map(({ name, blob }, i) => {\r\n              const url = URL.createObjectURL(blob);\r\n              return (\r\n                <div key={i} style={{ textAlign: 'center' }}>\r\n                  <p style={{ fontSize: '0.9rem' }}>{name}</p>\r\n                  <a href={url} download={name}>\r\n                    <button style={{\r\n                      marginTop: '8px',\r\n                      padding: '6px 12px',\r\n                      backgroundColor: '#4caf50',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      cursor: 'pointer'\r\n                    }}>\r\n                      Download\r\n                    </button>\r\n                  </a>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <button\r\n            onClick={downloadZip}\r\n            style={{\r\n              marginTop: '30px',\r\n              padding: '10px 16px',\r\n              backgroundColor: '#1976d2',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            ⬇ Download All as ZIP\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      {toast && (\r\n        <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />\r\n      )}\r\n    </FileToolsLayout>\r\n  );\r\n}","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        ×\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 🎨 Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","AllCompressionTools","compressedFiles","setCompressedFiles","toast","setToast","showToast","msg","message","arguments","undefined","setTimeout","FileToolsLayout","title","DropZone","async","output","incoming","ext","split","pop","toLowerCase","base","replace","PDFDocument","bytes","arrayBuffer","original","load","compressed","create","copyPages","getPageIndices","forEach","p","addPage","finalBytes","save","blob","Blob","push","includes","img","Image","src","URL","createObjectURL","Promise","res","onload","canvas","document","createElement","width","height","getContext","drawImage","mime","toBlob","trimmed","text","slice","lineHeight","_Fragment","flexWrap","gap","_ref2","url","textAlign","href","download","padding","backgroundColor","border","borderRadius","cursor","JSZip","default","saveAs","zip","generateAsync","Toast","onClose","role","container","closeBtn","justifyContent","alignItems","boxShadow","fontFamily","flex","background"],"sourceRoot":""}