{"version":3,"file":"static/js/4014.f55335eb.chunk.js","mappings":"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","sources":["components/filetools/DropZone.js","components/filetools/converters/ArchiveConverters.js","components/Toast.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\n\r\nexport default function ArchiveConverters() {\r\n  const [archives, setArchives] = useState([]);\r\n  const [extractedFiles, setExtractedFiles] = useState([]);\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (message, type = 'info') => {\r\n    setToast({ message, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const extractZip = async (file) => {\r\n    try {\r\n      const JSZip = (await import('jszip')).default;\r\n      const buffer = await file.arrayBuffer();\r\n      const zip = await JSZip.loadAsync(buffer);\r\n      const baseName = file.name.replace(/\\.[^/.]+$/, '');\r\n      const output = [];\r\n\r\n      for (const [filename, entry] of Object.entries(zip.files)) {\r\n        if (!entry.dir) {\r\n          const blob = await entry.async('blob');\r\n          const url = URL.createObjectURL(blob);\r\n          output.push({ name: `${baseName}_${filename}`, url, blob });\r\n        }\r\n      }\r\n\r\n      return output;\r\n    } catch {\r\n      showToast(`Failed to extract ${file.name}`, 'error');\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const handleArchives = async (files) => {\r\n    setArchives(files);\r\n    setExtractedFiles([]);\r\n\r\n    const allExtracted = [];\r\n\r\n    for (const file of files) {\r\n      const ext = file.name.split('.').pop().toLowerCase();\r\n      if (ext !== 'zip') {\r\n        showToast(`.${ext} extraction not supported frontend-only`, 'warning');\r\n        continue;\r\n      }\r\n\r\n      const extracted = await extractZip(file);\r\n      allExtracted.push(...extracted);\r\n    }\r\n\r\n    setExtractedFiles(allExtracted);\r\n    showToast(`Extracted ${allExtracted.length} file(s)`, 'success');\r\n  };\r\n\r\n  const downloadZip = async () => {\r\n    const JSZip = (await import('jszip')).default;\r\n    const { saveAs } = await import('file-saver');\r\n    const zip = new JSZip();\r\n\r\n    extractedFiles.forEach(({ name, blob }) => zip.file(name, blob));\r\n    const zipped = await zip.generateAsync({ type: 'blob' });\r\n    saveAs(zipped, 'extracted_contents.zip');\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"🗄️ Archive Converter\">\r\n      <DropZone multiple accept=\".zip\" onMultipleFiles={handleArchives} />\r\n\r\n      {/* 📘 SEO Guidance Block */}\r\n      <div style={{ marginTop: '30px', fontSize: '0.95rem', lineHeight: '1.6', color: '#444' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Extract ZIP Archives in Your Browser</h2>\r\n        <p>\r\n          Upload ZIP files and extract their contents instantly using a secure, frontend-only tool.\r\n          No server uploads required — ideal for quick file previews, downloads, and packaging.\r\n        </p>\r\n        <ul style={{ paddingLeft: '20px' }}>\r\n          <li>📦 Supports ZIP archive extraction directly in the browser</li>\r\n          <li>📄 Preview and download individual files</li>\r\n          <li>🧃 Repackage contents into a single ZIP for download</li>\r\n          <li>🔒 Fully private — no data leaves your device</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {extractedFiles.length > 0 && (\r\n        <>\r\n          <div style={{ marginTop: 30, display: 'flex', gap: 16, flexWrap: 'wrap' }}>\r\n            {extractedFiles.map(({ name, url }, i) => (\r\n              <div key={i} style={{ textAlign: 'center' }}>\r\n                <p style={{ fontSize: '0.9rem' }}>{name}</p>\r\n                <a href={url} download={name}>\r\n                  <button\r\n                    style={{\r\n                      padding: '6px 12px',\r\n                      backgroundColor: '#4caf50',\r\n                      color: 'white',\r\n                      border: 'none',\r\n                      borderRadius: '6px',\r\n                      cursor: 'pointer'\r\n                    }}\r\n                  >\r\n                    Download\r\n                  </button>\r\n                </a>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <button\r\n            onClick={downloadZip}\r\n            style={{\r\n              marginTop: 30,\r\n              padding: '10px 16px',\r\n              backgroundColor: '#1976d2',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '6px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            ⬇ Download All as ZIP\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n    </FileToolsLayout>\r\n  );\r\n}","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        ×\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 🎨 Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","ArchiveConverters","archives","setArchives","extractedFiles","setExtractedFiles","toast","setToast","showToast","message","arguments","undefined","setTimeout","extractZip","async","JSZip","default","buffer","arrayBuffer","zip","loadAsync","baseName","replace","output","filename","entry","Object","entries","dir","blob","url","URL","createObjectURL","push","FileToolsLayout","title","DropZone","allExtracted","ext","split","pop","toLowerCase","extracted","lineHeight","_Fragment","gap","flexWrap","_ref2","textAlign","href","download","padding","backgroundColor","border","borderRadius","cursor","saveAs","forEach","generateAsync","Toast","onClose","role","container","text","closeBtn","justifyContent","alignItems","boxShadow","fontFamily","flex","background"],"sourceRoot":""}