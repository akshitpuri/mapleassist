{"version":3,"file":"static/js/7907.47beb994.chunk.js","mappings":"kJAiEA,QA9DA,SAAiBA,GAA+D,IAA9D,OAAEC,EAAM,gBAAEC,EAAe,OAAEC,EAAS,IAAG,SAAEC,GAAW,GAAOJ,EAC3E,MAAMK,GAAWC,EAAAA,EAAAA,WACVC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,IA+BnD,OACEC,EAAAA,EAAAA,MAAA,OACEC,UAAU,WACVV,OAhCgBW,IAClBA,EAAEC,iBACF,MAAMC,EAAQC,MAAMC,KAAKJ,EAAEK,aAAaH,OACnB,IAAjBA,EAAMI,SAEVV,EAAiBM,GAEbV,GAAYF,EACdA,EAAgBY,GACPb,GACTA,EAAOa,EAAM,MAuBbK,WAAaP,GAAMA,EAAEC,iBACrBO,QApBgBC,IAAMhB,EAASiB,QAAQC,QAoBlBC,SAAA,EAErBd,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,mBAAiBpB,EAAW,IAAM,GAAG,2BACxCqB,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,IAAKtB,EACLF,OAAQA,EACRC,SAAUA,EACVwB,SA1BgBhB,IACpB,MAAME,EAAQC,MAAMC,KAAKJ,EAAEiB,OAAOf,OACb,IAAjBA,EAAMI,SAEVV,EAAiBM,GAEbV,GAAYF,EACdA,EAAgBY,GACPb,GACTA,EAAOa,EAAM,MAkBXgB,MAAO,CAAEC,QAAS,UAEnBxB,EAAcW,OAAS,IACtBO,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEE,UAAW,OAAQC,YAAa,QAAST,SACnDjB,EAAc2B,IAAI,CAACC,EAAMC,KACxBX,EAAAA,EAAAA,KAAA,MAAYK,MAAO,CAAEO,SAAU,SAAUC,MAAO,QAASd,SACtDW,EAAKI,MADCH,QAQrB,C,uDC5De,SAASI,EAAKxC,GAAuC,IAAtC,QAAEyC,EAAO,KAAEf,EAAO,OAAM,QAAEgB,GAAS1C,EAC/D,OACEU,EAAAA,EAAAA,MAAA,OAAKC,UAAW,eAAee,IAAQiB,KAAK,QAAQ,YAAU,YAAYb,MAAOc,EAAUpB,SAAA,EACzFC,EAAAA,EAAAA,KAAA,QAAMK,MAAOe,EAAKrB,SAAEiB,KACpBhB,EAAAA,EAAAA,KAAA,UACEL,QAASsB,EACTZ,MAAOgB,EACP,aAAW,uBAAsBtB,SAClC,WAKP,CAGA,MAAMoB,EAAY,CAChBb,QAAS,OACTgB,eAAgB,gBAChBC,WAAY,SACZC,QAAS,YACTC,aAAc,MACdC,UAAW,6BACXC,gBAAiB,UACjBf,SAAU,UACVC,MAAO,OACPe,IAAK,OACLC,WAAY,qCAGRT,EAAO,CACXU,KAAM,GAGFT,EAAW,CACfU,WAAY,cACZC,OAAQ,OACRpB,SAAU,SACVqB,OAAQ,UACRpB,MAAO,O,qICrCT,MAAM,YAAEqB,SAAsB,+BAGf,SAASC,IACtB,MAAO9C,EAAO+C,IAAYpD,EAAAA,EAAAA,UAAS,KAC5BqD,EAASC,IAActD,EAAAA,EAAAA,WAAS,IAChCuD,EAAOC,IAAYxD,EAAAA,EAAAA,UAAS,MAE7ByD,EAAY,SAACC,GACjBF,EAAS,CAAExB,QAAS0B,EAAKzC,KADC0C,UAAAlD,OAAA,QAAAmD,IAAAD,UAAA,GAAAA,UAAA,GAAG,SAE7BE,WAAW,IAAML,EAAS,MAAO,IACnC,EAoCA,OACEvD,EAAAA,EAAAA,MAAC6D,EAAAA,EAAe,CAACC,MAAM,+BAAoBhD,SAAA,EAEzCC,EAAAA,EAAAA,KAACgD,EAAAA,EAAQ,CACPrE,UAAQ,EACRD,OAAO,kBACPD,gBAAkBwE,IAChBb,EAASa,GACTR,EAAU,GAAGQ,EAASxD,yBAA0B,YAIpDR,EAAAA,EAAAA,MAAA,OAAKoB,MAAO,CAAEE,UAAW,OAAQK,SAAU,UAAWsC,WAAY,MAAOrC,MAAO,QAASd,SAAA,EACvFC,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEO,SAAU,UAAWb,SAAC,wCACnCd,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,qBACgBC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,SAAa,yQAExCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kJAGHd,EAAAA,EAAAA,MAAA,MAAIoB,MAAO,CAAEE,UAAW,OAAQC,YAAa,QAAST,SAAA,EACpDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2CACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6DACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mEAIPV,EAAMI,OAAS,IACdO,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEE,UAAW,OAAQC,YAAa,QAAST,SACnDV,EAAMoB,IAAI,CAACC,EAAMC,KAChBX,EAAAA,EAAAA,KAAA,MAAYK,MAAO,CAAEO,SAAU,SAAUC,MAAO,QAASd,SACtDW,EAAKI,MADCH,OAOfX,EAAAA,EAAAA,KAAA,UACEmD,SAAU9D,EAAMI,OAAS,GAAK4C,EAC9B1C,QA1EYyD,UAChB,GAAI/D,EAAMI,OAAS,EACjBgD,EAAU,0CAA2C,aADvD,CAKAH,GAAW,GAEX,IACE,MAAMe,QAAkBnB,EAAYoB,SAEpC,IAAK,MAAM5C,KAAQrB,EAAO,CACxB,MAAMkE,QAAc7C,EAAK8C,cACnBC,QAAYvB,EAAYwB,KAAKH,UACfF,EAAUM,UAAUF,EAAKA,EAAIG,mBAC3CC,QAASC,GAAST,EAAUU,QAAQD,GAC5C,CAEA,MAAME,QAAoBX,EAAUY,OAC9BC,EAAO,IAAIC,KAAK,CAACH,GAAc,CAAE/D,KAAM,oBACvCmE,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAON,EACZG,EAAKI,SAAW,aAChBJ,EAAKzE,QACLuE,IAAIO,gBAAgBR,GACpB3B,EAAU,yBAA0B,UACtC,CAAE,MAAOoC,GACPpC,EAAU,2BAA4B,QACxC,CAEAH,GAAW,EA3BX,GAuEIjC,MAAO,CACLE,UAAW,OACXiB,QAAS,YACTG,gBAAiB,UACjBd,MAAO,QACPmB,OAAQ,OACRP,aAAc,MACdQ,OAAQ5C,EAAMI,QAAU,EAAI,UAAY,eACxCM,SAEDsC,EAAU,aAAe,wBAG3BE,IACCvC,EAAAA,EAAAA,KAACe,EAAAA,EAAK,CAACC,QAASuB,EAAMvB,QAASf,KAAMsC,EAAMtC,KAAMgB,QAASA,IAAMuB,EAAS,UAIjF,C","sources":["components/filetools/DropZone.js","components/Toast.js","components/filetools/pdftools/MergePDF.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        √ó\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// üé® Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport BackButton from '../../BackButton';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\nconst { PDFDocument } = await import('pdf-lib');\r\n\r\n\r\nexport default function MergePDF() {\r\n  const [files, setFiles] = useState([]);\r\n  const [merging, setMerging] = useState(false);\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (msg, type = 'info') => {\r\n    setToast({ message: msg, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const mergePDFs = async () => {\r\n    if (files.length < 2) {\r\n      showToast('Please select at least 2 PDFs to merge.', 'error');\r\n      return;\r\n    }\r\n\r\n    setMerging(true);\r\n\r\n    try {\r\n      const mergedPdf = await PDFDocument.create();\r\n\r\n      for (const file of files) {\r\n        const bytes = await file.arrayBuffer();\r\n        const pdf = await PDFDocument.load(bytes);\r\n        const pages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());\r\n        pages.forEach((page) => mergedPdf.addPage(page));\r\n      }\r\n\r\n      const mergedBytes = await mergedPdf.save();\r\n      const blob = new Blob([mergedBytes], { type: 'application/pdf' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = 'merged.pdf';\r\n      link.click();\r\n      URL.revokeObjectURL(url);\r\n      showToast('Merged PDF downloaded!', 'success');\r\n    } catch (err) {\r\n      showToast('Merge failed. Try again.', 'error');\r\n    }\r\n\r\n    setMerging(false);\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"üìé Merge PDF Files\">\r\n      \r\n      <DropZone\r\n        multiple\r\n        accept=\"application/pdf\"\r\n        onMultipleFiles={(selected) => {\r\n          setFiles(selected);\r\n          showToast(`${selected.length} PDF(s) selected`, 'info');\r\n        }}\r\n      />\r\n\r\n      <div style={{ marginTop: '30px', fontSize: '0.95rem', lineHeight: '1.6', color: '#444' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Merge PDF Files Easily & Privately</h2>\r\n        <p>\r\n          Combine multiple <strong>.pdf</strong> documents into one ‚Äî quickly and securely, right inside your browser. Our online PDF merger is 100% client-side, meaning your files stay on your device. Perfect for merging invoices, contracts, reports, or ebooks without uploading anything to a server.\r\n        </p>\r\n        <p>\r\n          Simply drag and drop two or more PDF files below, and click ‚ÄúDownload Merged PDF‚Äù to instantly generate a single unified document.\r\n        </p>\r\n        <ul style={{ marginTop: '10px', paddingLeft: '20px' }}>\r\n          <li>üìÑ Combine PDF files online without sign-up</li>\r\n          <li>‚ö° Fast, lightweight, and private</li>\r\n          <li>üîí No server upload ‚Äî 100% browser-based</li>\r\n          <li>üß© Compatible with mobile and desktop browsers</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {files.length > 0 && (\r\n        <ul style={{ marginTop: '16px', paddingLeft: '18px' }}>\r\n          {files.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      <button\r\n        disabled={files.length < 2 || merging}\r\n        onClick={mergePDFs}\r\n        style={{\r\n          marginTop: '24px',\r\n          padding: '10px 16px',\r\n          backgroundColor: '#3f51b5',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '6px',\r\n          cursor: files.length >= 2 ? 'pointer' : 'not-allowed'\r\n        }}\r\n      >\r\n        {merging ? 'Merging...' : 'Download Merged PDF'}\r\n      </button>\r\n\r\n      {toast && (\r\n        <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />\r\n      )}\r\n    </FileToolsLayout>\r\n  );\r\n}\r\n"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","Toast","message","onClose","role","container","text","closeBtn","justifyContent","alignItems","padding","borderRadius","boxShadow","backgroundColor","gap","fontFamily","flex","background","border","cursor","PDFDocument","MergePDF","setFiles","merging","setMerging","toast","setToast","showToast","msg","arguments","undefined","setTimeout","FileToolsLayout","title","DropZone","selected","lineHeight","disabled","async","mergedPdf","create","bytes","arrayBuffer","pdf","load","copyPages","getPageIndices","forEach","page","addPage","mergedBytes","save","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","revokeObjectURL","err"],"sourceRoot":""}