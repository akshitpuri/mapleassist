{"version":3,"file":"static/js/4536.549e96a2.chunk.js","mappings":"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","sources":["components/filetools/DropZone.js","components/Toast.js","components/filetools/pdftools/ExtractImagesAndText.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        √ó\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// üé® Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\nimport BackButton from '../../BackButton';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\nimport 'pdfjs-dist/build/pdf.worker.entry';\r\n\r\nexport default function ExtractImagesAndText() {\r\n  const [file, setFile] = useState(null);\r\n  const [text, setText] = useState('');\r\n  const [images, setImages] = useState([]);\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (msg, type = 'info') => {\r\n    setToast({ message: msg, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const extractContent = async () => {\r\n    if (!file) return showToast('Upload a PDF first', 'error');\r\n    const bytes = await file.arrayBuffer();\r\n\r\n    pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n    const doc = await pdfjsLib.getDocument({ data: bytes }).promise;\r\n\r\n    let fullText = '';\r\n    const imageList = [];\r\n\r\n    for (let i = 1; i <= doc.numPages; i++) {\r\n      const page = await doc.getPage(i);\r\n      const textContent = await page.getTextContent();\r\n      const pageText = textContent.items.map(item => item.str).join(' ');\r\n      fullText += `Page ${i}:\\n${pageText}\\n\\n`;\r\n\r\n      const viewport = page.getViewport({ scale: 1.5 });\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = viewport.width;\r\n      canvas.height = viewport.height;\r\n      await page.render({ canvasContext: canvas.getContext('2d'), viewport }).promise;\r\n      imageList.push(canvas.toDataURL());\r\n    }\r\n\r\n    setText(fullText);\r\n    setImages(imageList);\r\n    showToast('Text and images extracted!', 'success');\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"üîç Extract Text & Images from PDF\" showBackButton>\r\n      \r\n      <DropZone multiple={false} accept=\".pdf\" onMultipleFiles={(files) => setFile(files[0])} />\r\n\r\n      <button\r\n        onClick={extractContent}\r\n        style={{\r\n          marginTop: '20px',\r\n          padding: '10px 16px',\r\n          backgroundColor: '#3f51b5',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '6px',\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        Extract Content\r\n      </button>\r\n\r\n      {/* üîç SEO-enhanced guidance block */}\r\n      <div style={{ marginTop: '30px', fontSize: '0.95rem', lineHeight: '1.6', color: '#444' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Extract Text and Images from PDF Instantly</h2>\r\n        <p>\r\n          This tool allows you to extract readable text and high-resolution page snapshots from any PDF file. Perfect for summarizing, archiving, or analyzing document content.\r\n          Your files are processed entirely inside your browser using <strong>pdfjs-dist</strong> ‚Äî no uploads, no delays.\r\n        </p>\r\n        <ul style={{ paddingLeft: '20px' }}>\r\n          <li>üßæ Extracts typed text from PDF content</li>\r\n          <li>üñºÔ∏è Renders snapshots for visual analysis or download</li>\r\n          <li>üîê Fully secure ‚Äî processed offline using open-source tools</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {text && (\r\n        <div style={{ marginTop: '30px' }}>\r\n          <h3>üßæ Extracted Text</h3>\r\n          <textarea\r\n            value={text}\r\n            readOnly\r\n            rows={12}\r\n            style={{ width: '100%', maxWidth: '600px', padding: '10px' }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {images.length > 0 && (\r\n        <div style={{ marginTop: '30px' }}>\r\n          <h3>üñºÔ∏è Page Snapshots</h3>\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\r\n            {images.map((src, i) => (\r\n              <div key={i} style={{ textAlign: 'center' }}>\r\n                <img src={src} alt={`Page ${i + 1}`} style={{ width: '200px', borderRadius: '4px' }} />\r\n                <a href={src} download={`page_${i + 1}.png`}>\r\n                  <button style={{\r\n                    marginTop: '8px',\r\n                    padding: '6px 12px',\r\n                    backgroundColor: '#4caf50',\r\n                    color: 'white',\r\n                    border: 'none',\r\n                    borderRadius: '6px',\r\n                    cursor: 'pointer'\r\n                  }}>\r\n                    Download\r\n                  </button>\r\n                </a>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {toast && (\r\n        <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />\r\n      )}\r\n    </FileToolsLayout>\r\n  );\r\n}"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","Toast","message","onClose","role","container","text","closeBtn","justifyContent","alignItems","padding","borderRadius","boxShadow","backgroundColor","gap","fontFamily","flex","background","border","cursor","ExtractImagesAndText","setFile","setText","images","setImages","toast","setToast","showToast","msg","arguments","undefined","setTimeout","FileToolsLayout","title","showBackButton","DropZone","async","bytes","arrayBuffer","pdfjsLib","workerSrc","doc","data","promise","fullText","imageList","numPages","page","getPage","getTextContent","items","item","str","join","viewport","getViewport","scale","canvas","document","createElement","width","height","render","canvasContext","getContext","push","toDataURL","lineHeight","value","readOnly","rows","maxWidth","flexWrap","src","textAlign","alt","href","download"],"sourceRoot":""}