{"version":3,"file":"static/js/3034.53569657.chunk.js","mappings":"kJAiEA,QA9DA,SAAiBA,GAA+D,IAA9D,OAAEC,EAAM,gBAAEC,EAAe,OAAEC,EAAS,IAAG,SAAEC,GAAW,GAAOJ,EAC3E,MAAMK,GAAWC,EAAAA,EAAAA,WACVC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,IA+BnD,OACEC,EAAAA,EAAAA,MAAA,OACEC,UAAU,WACVV,OAhCgBW,IAClBA,EAAEC,iBACF,MAAMC,EAAQC,MAAMC,KAAKJ,EAAEK,aAAaH,OACnB,IAAjBA,EAAMI,SAEVV,EAAiBM,GAEbV,GAAYF,EACdA,EAAgBY,GACPb,GACTA,EAAOa,EAAM,MAuBbK,WAAaP,GAAMA,EAAEC,iBACrBO,QApBgBC,IAAMhB,EAASiB,QAAQC,QAoBlBC,SAAA,EAErBd,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,mBAAiBpB,EAAW,IAAM,GAAG,2BACxCqB,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,IAAKtB,EACLF,OAAQA,EACRC,SAAUA,EACVwB,SA1BgBhB,IACpB,MAAME,EAAQC,MAAMC,KAAKJ,EAAEiB,OAAOf,OACb,IAAjBA,EAAMI,SAEVV,EAAiBM,GAEbV,GAAYF,EACdA,EAAgBY,GACPb,GACTA,EAAOa,EAAM,MAkBXgB,MAAO,CAAEC,QAAS,UAEnBxB,EAAcW,OAAS,IACtBO,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEE,UAAW,OAAQC,YAAa,QAAST,SACnDjB,EAAc2B,IAAI,CAACC,EAAMC,KACxBX,EAAAA,EAAAA,KAAA,MAAYK,MAAO,CAAEO,SAAU,SAAUC,MAAO,QAASd,SACtDW,EAAKI,MADCH,QAQrB,C,oGCzDe,SAASI,IACtB,MAAOC,EAASC,IAAcjC,EAAAA,EAAAA,UAAS,OAChCkC,EAAWC,IAAgBnC,EAAAA,EAAAA,UAAS,OACpCoC,EAAQC,IAAarC,EAAAA,EAAAA,UAAS,KAC9BsC,EAAOC,IAAYvC,EAAAA,EAAAA,UAAS,MAE7BwC,EAAY,SAACC,GACjBF,EAAS,CAAEE,UAASxB,KADUyB,UAAAjC,OAAA,QAAAkC,IAAAD,UAAA,GAAAA,UAAA,GAAG,SAEjCE,WAAW,IAAML,EAAS,MAAO,IACnC,EAwCA,OACEtC,EAAAA,EAAAA,MAAC4C,EAAAA,EAAe,CAACC,MAAM,sCAA4BC,gBAAc,EAAAhC,SAAA,EAE/DC,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAACrD,UAAU,EAAOD,OAAO,OAAOD,gBAAkBY,GAAU4B,EAAW5B,EAAM,OACtFW,EAAAA,EAAAA,KAACgC,EAAAA,EAAQ,CAACrD,UAAU,EAAOD,OAAO,uBAAuBD,gBAAkBY,GAAU8B,EAAa9B,EAAM,OAExGW,EAAAA,EAAAA,KAAA,UACEL,QA7CasC,UACjB,IAAKjB,IAAYE,EAAW,OAAOM,EAAU,kCAAmC,SAChF,MAAM,YAAEU,SAAsB,+BAE9B,IACE,MAAMC,QAAiBnB,EAAQoB,cACzBC,QAAmBnB,EAAUkB,cAC7BE,QAAeJ,EAAYK,KAAKJ,GAEtC,IAAIK,EAEFA,EADqB,cAAnBtB,EAAUjB,WACEqC,EAAOG,SAASJ,SAEhBC,EAAOI,SAASL,GAGlBC,EAAOK,WACfC,QAASC,IACb,MAAM,MAAEC,EAAK,OAAEC,GAAWF,EAAKG,UAC/BH,EAAKI,UAAUT,EAAO,CACpBU,EAAGJ,EAAQ,IACXK,EAAGJ,EAAS,IACZD,MAAO,IACPC,OAAQ,QAIZ,MAAMK,QAAcd,EAAOe,OACrBC,EAAO,IAAIC,KAAK,CAACH,GAAQ,CAAEnD,KAAM,oBACjCuD,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAW,GAAG3C,EAAQF,KAAK8C,QAAQ,OAAQ,kBACjDvC,EAAU,CAAC,CAAEP,KAAM6C,EAAUH,MAAKF,UAClC9B,EAAU,8BAA+B,UAC3C,CAAE,MACAA,EAAU,2BAA4B,QACxC,GAWInB,MAAO,CACLE,UAAW,OACXsD,QAAS,YACTC,gBAAiB,UACjBjD,MAAO,QACPkD,OAAQ,OACRC,aAAc,MACdC,OAAQ,WACRlE,SACH,wBAKDd,EAAAA,EAAAA,MAAA,OAAKoB,MAAO,CAAEE,UAAW,OAAQK,SAAU,UAAWC,MAAO,OAAQqD,WAAY,OAAQnE,SAAA,EACvFC,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEO,SAAU,UAAWb,SAAC,wCACnCd,EAAAA,EAAAA,MAAA,KAAAc,SAAA,CAAG,iGAC4FC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,YAAgB,qDAEvHd,EAAAA,EAAAA,MAAA,MAAIoB,MAAO,CAAEG,YAAa,QAAST,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wEAIPqB,EAAO3B,OAAS,IACfO,EAAAA,EAAAA,KAAA,OAAKK,MAAO,CAAEE,UAAW,OAAQD,QAAS,OAAQ6D,SAAU,OAAQC,IAAK,QAASrE,SAC/EqB,EAAOX,IAAI,CAAAlC,EAAgBoC,KAAC,IAAhB,KAAEG,EAAI,IAAE0C,GAAKjF,EAAA,OACxBU,EAAAA,EAAAA,MAAA,OAAaoB,MAAO,CAAEgE,UAAW,UAAWtE,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAAEO,SAAU,UAAWb,SAAEe,KACnCd,EAAAA,EAAAA,KAAA,KAAGsE,KAAMd,EAAKe,SAAUzD,EAAKf,UAC3BC,EAAAA,EAAAA,KAAA,UAAQK,MAAO,CACbE,UAAW,MACXsD,QAAS,WACTC,gBAAiB,UACjBjD,MAAO,QACPkD,OAAQ,OACRC,aAAc,MACdC,OAAQ,WACRlE,SAAC,iBAXGY,OAoBfW,IAAStB,EAAAA,EAAAA,KAACwE,EAAAA,EAAK,CAAC/C,QAASH,EAAMG,QAASxB,KAAMqB,EAAMrB,KAAMwE,QAASA,IAAMlD,EAAS,UAGzF,C,uDChHe,SAASiD,EAAKjG,GAAuC,IAAtC,QAAEkD,EAAO,KAAExB,EAAO,OAAM,QAAEwE,GAASlG,EAC/D,OACEU,EAAAA,EAAAA,MAAA,OAAKC,UAAW,eAAee,IAAQyE,KAAK,QAAQ,YAAU,YAAYrE,MAAOsE,EAAU5E,SAAA,EACzFC,EAAAA,EAAAA,KAAA,QAAMK,MAAOuE,EAAK7E,SAAE0B,KACpBzB,EAAAA,EAAAA,KAAA,UACEL,QAAS8E,EACTpE,MAAOwE,EACP,aAAW,uBAAsB9E,SAClC,WAKP,CAGA,MAAM4E,EAAY,CAChBrE,QAAS,OACTwE,eAAgB,gBAChBC,WAAY,SACZlB,QAAS,YACTG,aAAc,MACdgB,UAAW,6BACXlB,gBAAiB,UACjBlD,SAAU,UACVC,MAAO,OACPuD,IAAK,OACLa,WAAY,qCAGRL,EAAO,CACXM,KAAM,GAGFL,EAAW,CACfM,WAAY,cACZpB,OAAQ,OACRnD,SAAU,SACVqD,OAAQ,UACRpD,MAAO,O","sources":["components/filetools/DropZone.js","components/filetools/pdftools/AddImageStamp.js","components/Toast.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport './DropZone.css';\r\n\r\nfunction DropZone({ onDrop, onMultipleFiles, accept = '*', multiple = false }) {\r\n  const inputRef = useRef();\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const files = Array.from(e.dataTransfer.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleClick = () => inputRef.current.click();\r\n\r\n  const handleChange = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (files.length === 0) return;\r\n\r\n    setSelectedFiles(files);\r\n\r\n    if (multiple && onMultipleFiles) {\r\n      onMultipleFiles(files);\r\n    } else if (onDrop) {\r\n      onDrop(files[0]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"dropzone\"\r\n      onDrop={handleDrop}\r\n      onDragOver={(e) => e.preventDefault()}\r\n      onClick={handleClick}\r\n    >\r\n      <p>Drag & drop file{multiple ? 's' : ''}, or click to browse</p>\r\n      <input\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        accept={accept}\r\n        multiple={multiple}\r\n        onChange={handleChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {selectedFiles.length > 0 && (\r\n        <ul style={{ marginTop: '10px', paddingLeft: '16px' }}>\r\n          {selectedFiles.map((file, i) => (\r\n            <li key={i} style={{ fontSize: '0.9rem', color: '#555' }}>\r\n              {file.name}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZone;\r\n","import React, { useState } from 'react';\r\nimport FileToolsLayout from '../FileToolsLayout';\r\nimport DropZone from '../DropZone';\r\nimport Toast from '../../Toast';\r\n\r\n\r\nexport default function AddImageStamp() {\r\n  const [pdfFile, setPdfFile] = useState(null);\r\n  const [stampFile, setStampFile] = useState(null);\r\n  const [result, setResult] = useState([]);\r\n  const [toast, setToast] = useState(null);\r\n\r\n  const showToast = (message, type = 'info') => {\r\n    setToast({ message, type });\r\n    setTimeout(() => setToast(null), 3000);\r\n  };\r\n\r\n  const applyStamp = async () => {\r\n    if (!pdfFile || !stampFile) return showToast('Upload both PDF and image stamp', 'error');\r\n    const { PDFDocument } = await import('pdf-lib');\r\n\r\n    try {\r\n      const pdfBytes = await pdfFile.arrayBuffer();\r\n      const imageBytes = await stampFile.arrayBuffer();\r\n      const pdfDoc = await PDFDocument.load(pdfBytes);\r\n\r\n      let image;\r\n      if (stampFile.type === 'image/png') {\r\n        image = await pdfDoc.embedPng(imageBytes);\r\n      } else {\r\n        image = await pdfDoc.embedJpg(imageBytes);\r\n      }\r\n\r\n      const pages = pdfDoc.getPages();\r\n      pages.forEach((page) => {\r\n        const { width, height } = page.getSize();\r\n        page.drawImage(image, {\r\n          x: width - 120,\r\n          y: height - 120,\r\n          width: 100,\r\n          height: 100\r\n        });\r\n      });\r\n\r\n      const final = await pdfDoc.save();\r\n      const blob = new Blob([final], { type: 'application/pdf' });\r\n      const url = URL.createObjectURL(blob);\r\n      const fileName = `${pdfFile.name.replace('.pdf', '')}_stamped.pdf`;\r\n      setResult([{ name: fileName, url, blob }]);\r\n      showToast('Stamp applied to all pages!', 'success');\r\n    } catch {\r\n      showToast('Failed to stamp your PDF', 'error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FileToolsLayout title=\"üìç Add Image Stamp to PDF\" showBackButton>\r\n    \r\n      <DropZone multiple={false} accept=\".pdf\" onMultipleFiles={(files) => setPdfFile(files[0])} />\r\n      <DropZone multiple={false} accept=\"image/png,image/jpeg\" onMultipleFiles={(files) => setStampFile(files[0])} />\r\n\r\n      <button\r\n        onClick={applyStamp}\r\n        style={{\r\n          marginTop: '20px',\r\n          padding: '10px 16px',\r\n          backgroundColor: '#3f51b5',\r\n          color: 'white',\r\n          border: 'none',\r\n          borderRadius: '6px',\r\n          cursor: 'pointer'\r\n        }}\r\n      >\r\n        Apply Stamp to PDF\r\n      </button>\r\n\r\n      {/* üîç SEO-enhanced guidance block */}\r\n      <div style={{ marginTop: '30px', fontSize: '0.95rem', color: '#444', lineHeight: '1.6' }}>\r\n        <h2 style={{ fontSize: '1.2rem' }}>Stamp Your PDF with a Logo or Seal</h2>\r\n        <p>\r\n          Upload your brand mark, seal, or approval stamp and embed it on every page of your PDF using <strong>pdf-lib</strong>. All processing is done privately in-browser.\r\n        </p>\r\n        <ul style={{ paddingLeft: '20px' }}>\r\n          <li>üìç Perfect for invoices, certificates, and official documents</li>\r\n          <li>üñºÔ∏è Supports PNG and JPG formats</li>\r\n          <li>üîê Secure and client-side ‚Äî no upload required</li>\r\n        </ul>\r\n      </div>\r\n\r\n      {result.length > 0 && (\r\n        <div style={{ marginTop: '30px', display: 'flex', flexWrap: 'wrap', gap: '20px' }}>\r\n          {result.map(({ name, url }, i) => (\r\n            <div key={i} style={{ textAlign: 'center' }}>\r\n              <p style={{ fontSize: '0.9rem' }}>{name}</p>\r\n              <a href={url} download={name}>\r\n                <button style={{\r\n                  marginTop: '8px',\r\n                  padding: '6px 12px',\r\n                  backgroundColor: '#4caf50',\r\n                  color: 'white',\r\n                  border: 'none',\r\n                  borderRadius: '6px',\r\n                  cursor: 'pointer'\r\n                }}>\r\n                  Download\r\n                </button>\r\n              </a>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {toast && <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />}\r\n    </FileToolsLayout>\r\n  );\r\n}","import React from 'react';\r\nimport './Toast.css';\r\n\r\nexport default function Toast({ message, type = 'info', onClose }) {\r\n  return (\r\n    <div className={`toast toast-${type}`} role=\"alert\" aria-live=\"assertive\" style={container}>\r\n      <span style={text}>{message}</span>\r\n      <button\r\n        onClick={onClose}\r\n        style={closeBtn}\r\n        aria-label=\"Dismiss notification\"\r\n      >\r\n        √ó\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// üé® Inline Styles (optional if not defined in Toast.css)\r\nconst container = {\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  padding: '12px 16px',\r\n  borderRadius: '8px',\r\n  boxShadow: '0 2px 6px rgba(0,0,0,0.08)',\r\n  backgroundColor: '#f0f0f0',\r\n  fontSize: '0.95rem',\r\n  color: '#333',\r\n  gap: '12px',\r\n  fontFamily: '\"Segoe UI\", system-ui, sans-serif'\r\n};\r\n\r\nconst text = {\r\n  flex: 1\r\n};\r\n\r\nconst closeBtn = {\r\n  background: 'transparent',\r\n  border: 'none',\r\n  fontSize: '1.2rem',\r\n  cursor: 'pointer',\r\n  color: '#666'\r\n};"],"names":["_ref","onDrop","onMultipleFiles","accept","multiple","inputRef","useRef","selectedFiles","setSelectedFiles","useState","_jsxs","className","e","preventDefault","files","Array","from","dataTransfer","length","onDragOver","onClick","handleClick","current","click","children","_jsx","type","ref","onChange","target","style","display","marginTop","paddingLeft","map","file","i","fontSize","color","name","AddImageStamp","pdfFile","setPdfFile","stampFile","setStampFile","result","setResult","toast","setToast","showToast","message","arguments","undefined","setTimeout","FileToolsLayout","title","showBackButton","DropZone","async","PDFDocument","pdfBytes","arrayBuffer","imageBytes","pdfDoc","load","image","embedPng","embedJpg","getPages","forEach","page","width","height","getSize","drawImage","x","y","final","save","blob","Blob","url","URL","createObjectURL","fileName","replace","padding","backgroundColor","border","borderRadius","cursor","lineHeight","flexWrap","gap","textAlign","href","download","Toast","onClose","role","container","text","closeBtn","justifyContent","alignItems","boxShadow","fontFamily","flex","background"],"sourceRoot":""}